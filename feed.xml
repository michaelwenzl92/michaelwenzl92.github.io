<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://michaelwenzl.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://michaelwenzl.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-02-04T11:33:17+00:00</updated><id>https://michaelwenzl.com/feed.xml</id><title type="html">blank</title><subtitle>a blog on software development and music
</subtitle><entry><title type="html">Stream of Void - EP Release “Awakening”</title><link href="https://michaelwenzl.com/music/2021/03/21/sov_awakening.html" rel="alternate" type="text/html" title="Stream of Void - EP Release “Awakening”" /><published>2021-03-21T00:00:00+00:00</published><updated>2021-03-21T00:00:00+00:00</updated><id>https://michaelwenzl.com/music/2021/03/21/sov_awakening</id><content type="html" xml:base="https://michaelwenzl.com/music/2021/03/21/sov_awakening.html"><![CDATA[<p>My band <a href="https://www.facebook.com/StreamofVoid">Stream of Void</a> has released the first EP titled “Awakening”.</p>

<p>We are very proud of this first steps into the music scene and already work on our next release.</p>

<iframe src="https://open.spotify.com/embed/album/3992neQE1QqkouJSWz9zYb" width="100%" height="380" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>]]></content><author><name></name></author><category term="music" /><category term="release" /><summary type="html"><![CDATA[The release of our debut EP Awakening]]></summary></entry><entry><title type="html">WebAssembly - The new era of web development</title><link href="https://michaelwenzl.com/software/2020/03/22/webassembly.html" rel="alternate" type="text/html" title="WebAssembly - The new era of web development" /><published>2020-03-22T05:54:00+00:00</published><updated>2020-03-22T05:54:00+00:00</updated><id>https://michaelwenzl.com/software/2020/03/22/webassembly</id><content type="html" xml:base="https://michaelwenzl.com/software/2020/03/22/webassembly.html"><![CDATA[<p>On 5 December 2019 the World Wide Web Consortium made with this <a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en">article</a> a major step towards a faster and more flexible web. They added a fourth language for client-side web development to the existing languages HTML, CSS, and Javascript. All major browsers already supported it since 2017. This language will not only enhance the performance and improves the available application areas, but it will also make the web more agnostic on which programming language you or your development team want to develop. This is the possibility to enter a completely new era of web development and this language is called <strong>WebAssembly</strong>.</p>

<h2 id="what-is-webassembly">What is WebAssembly?</h2>

<p>Let us start to analyse the term assembly. Regarding <a href="https://en.wikipedia.org/wiki/Assembly_language">Wikipedia</a> the term refers to the good old low-level programming language only one abstraction layer above binary machine-code. Usually one assembly code statement stands for one machine instruction. This gives an insight on how low-level and how close to the machine this language really is.</p>

<p>WebAssembly basically is assembly for the browser. It is binary code that runs in the same sandbox and virtual machine like Javascript, but at a much lower level of abstraction. <strong>One can say that it is the machine code of the web.</strong> It is important to mention that this is not real machine code. It is in reality byte code and the browser is able to execute it independently on every platform. This has some major advantages against Javascript.</p>

<p>Because of the lower level of abstraction, it is possible to create much more efficient code. This not only applies to memory management, but also the optimization of execution steps. The very expensive interpretation step falls away. Furthermore, due to the static type system it is much more efficient than Javascript.</p>

<p>Programming that way may sound a bit laborious and more complex. It is basically really more laborious and complex, but no one have ever said that it have to be programmed in it directly. (There is also only very few people out there programming in assembly) Because it is basically the machine code of the web, it is possible to code in other languages and compile this code to WebAssembly. Now we have a powerful possibility to write interactive client-side code in any other language like C or C++. The compiler has the ability to optimize effectively and give the compiled files a much smaller file size and a better execution performance. On GitHub a list on which languages are currently supported for compiling to WebAssembly is available in <a href="https://github.com/appcypher/awesome-wasm-langs">repository</a>.</p>

<h2 id="new-application-areas-with-webassembly">New application areas with WebAssembly</h2>

<p>With optimized code the browser is now able to compute complex and high-performance tasks. This elevates browser gaming to a new sphere and also enables porting big software suites to the web. A very good example is the added WebAssembly-support for the UnrealEngine. In the following video you can see a presentation of the Unreal Engine 4 executed inside the browser. Basically a top-notch gaming engine executed without any installation. On top of that it is executed in a piece of software that is more or less installed on every computer and smartphone on our planet.</p>

<div class="embed-container">
    <iframe loading="lazy" title="Unreal Engine 4 Web Asm Demo. implyingprogramming.com" src="https://www.youtube.com/embed/eh-yy7f1bvQ?feature=oembed" allowfullscreen="" class="youtube">
    </iframe>
</div>

<p>Another example would be the porting of the 30-year old AutoCAD code base to the web. It is possible to port an old C++ code base to the web. Because of that it is possible to benefit from the web’s advantages like better a completely new customer target market or better CI/CD. (continuous integration / continuous delivery) If you want to hear more about this porting project you can watch the <a href="https://www.infoq.com/presentations/autocad-webassembly/?utm_source=presentations&amp;utm_medium=ny&amp;utm_campaign=qcon">talk</a> from one of the developers.</p>

<p>Other possible use cases for WebAssembly are available in the following <a href="https://webassembly.org/docs/use-cases/">link</a>.</p>

<h2 id="will-webassembly-replace-javascript">Will WebAssembly replace Javascript?</h2>

<p>In the short term it is very unlikely that WebAssembly will replace Javascript. It will much more likely complement JavaScript in its weaker parts for special use cases like gaming or computation heavy software.</p>

<p>Nonetheless, in the long term it will replace Javascript and Javascript will be used more for gluing the HTML-DOM and WebAssembly together. It will create a completely new ecosystem for web development. There will be the opportunity for enterprise projects to write not only the backend, but also the frontend in Java or C#. Existing software suites written in TypeScript can be compiled to WebAssembly. A good indicator that I am not that off with my possible forecast is this <a href="https://docs.assemblyscript.org/details/compiler">link</a> to a project for a TypeScript compiler to WebAssembly.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There will be a lot of new possibilities with this new language. From gaming to computation heavy applications to porting desktop software to the web. All the discussed approaches are still a bit in its infancy, but it is already well-received and supported by a lot of projects out there.</p>

<p>For me personally it was always a bit frustrating that Javascript was more or less the machine language of the web. Lots of web frameworks are transpiling to Javascript and even if optimization frameworks like asm.js were a step to a more performant web, WebAssembly is a much cleaner and better solution. I am really excited since the first time I heard of WebAssembly and I cannot wait until trying it out  for the first time on a real world project.</p>]]></content><author><name></name></author><category term="software" /><category term="web" /><summary type="html"><![CDATA[WebAssembly - The new era of web development]]></summary></entry><entry><title type="html">Responsibilities of senior software developers</title><link href="https://michaelwenzl.com/software/2020/03/15/senior.html" rel="alternate" type="text/html" title="Responsibilities of senior software developers" /><published>2020-03-15T09:39:00+00:00</published><updated>2020-03-15T09:39:00+00:00</updated><id>https://michaelwenzl.com/software/2020/03/15/senior</id><content type="html" xml:base="https://michaelwenzl.com/software/2020/03/15/senior.html"><![CDATA[<p>For me, the phrase ‘senior software developer’ has always been quite a vague term. Is it simply a developer who has more than five years of work experience? Or is it a developer who learns all day and becomes a programming wizard? I have thought about this very often since I have grown more and more into this role and into the maturity of a senior. For me, the responsibilities of senior software developers can roughly be summarized in the next few paragraphs. I will also include some book suggestions in every paragraph to give you a chance to immerse yourself deeper in the topic.</p>

<h2 id="be-responsible">Be Responsible</h2>

<p>One of the most overlooked requirements for a more experienced developer is being <strong>responsible for their own failures</strong>. They should avoid passing responsibility off onto other teams, the requirement engineers, or the lead developer. This ability is a key trait for self-improvement not only as a developer but also as a human being – no one likes eternal victims. I can really recommend the book <em>Clean Coder</em> by Robert C. Martin on this topic. It was such a good read, and the chapter on professionalism, in particular, had a major impact on me.</p>

<h2 id="know-your-stuff">Know your stuff</h2>

<div class="row">
    <div class="col-sm mt-3 mt-md-0 post-img">
        <figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/posts/senior_books-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/posts/senior_books-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/posts/senior_books-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/posts/senior_books.jpg" title="Photo by Patrick Tomasso on Unsplash" />

  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Photo <a href="https://unsplash.com/@impatrickt?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Patrick Tomasso</a> on <a href="https://unsplash.com/s/photos/knowledge?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText">Unsplash</a>
</div>

<p>Programming and producing hard-to-maintain and hard-to-read code simply won’t work – not if you want to develop your skills and your career. To improve, you have to dive into the ocean of available knowledge and learn lots of theoretical stuff about software engineering. The easiest way to accomplish this is by <strong>reading the classics of software development</strong>. There are a huge number of books available, but I especially appreciated reading those by Uncle Bob, Eric Evans and Steve McConnell. For an overview of relevant literature I can recommend this <a rel="noreferrer noopener" href="https://simpleprogrammer.com/best-programming-books-2019/" target="_blank">list</a> from John Somnez.</p>

<p>The other possibility would be watching online courses on relevant topics. One thing that I don’t really like about video courses is that the course creators are very often not as interesting or as entertaining as the well-honed writing style of a good and well-established author like R. C. Martin. The other thing that I can’t stand about video courses is the longevity of the information. I always feel that information from books is much easier to remember than from a video source.</p>

<p>But it is not all about programming technique. Techniques from other disciplines like software testing, project management, rhetoric basics or software security are very useful for operating effectively while working on a typical software development project.</p>

<h2 id="generalize-and-abstract">Generalize and Abstract</h2>

<p>The most popular and obvious skill for senior developers is the ability to generalize and abstract. With this ability it is possible to abstract complex low-level information and generalize it with more generic and easy-to-use interfaces. It depends on the knowledge mentioned in the previous section of this blog post, but also needs lots of <strong>practice and experience</strong>. It is important to learn when to apply which technique to reach a point were the abstraction is effective. The number one priority for generalization is improving the maintainability and readability of the code base. Sometimes it happens that a compromise of the two is necessary. Nonetheless, it is never advisable to apply generalization without improving one of the two previously mentioned aspects first.</p>

<p>I can recommend information about software architecture from, for example, <em>Clean Architecture</em> by R. C. Martin, design patterns and their correct usage from the Gang of Four book, domain-driven design from the book by Eric Evans, clean coding guidelines from <em>Clean Code</em> by R. C. Martin, and also how to write side effect-free code by simply adopting the principle of using state as little as possible. (<strong>Pure functions for the win!</strong>)</p>

<h2 id="quality-matters">Quality matters</h2>

<p>Quality should always take priority over an earlier delivery of code. The term in the context of software development simply means that the stuff works in a stable way and as expected. To guarantee this, the software has to have well-defined requirements and a comprehensive test suite.</p>

<p>When there are unclear requirements, it’s important to communicate and ask for them to be refined further. Inexperienced developers very often simply ignore unclear directions in requirement documents and produce software that is basically garbage. <strong>A responsible senior developer has the final goal in mind and strives for good software that works for the user</strong>. It should definitely not be his final goal to write software that only works on a technical or an ‘as mentioned in the user story’ level. It doesn’t matter whether the garbage produced is his fault or someone else’s.</p>

<p>The other very important quality factor is testing. Software testing is a very big field and lots of stuff can be done wrong. First of all, as a developer it is important to <strong>unit test the produced code</strong>. But also, <strong>support for software testers</strong> is very important and a key factor in a successful delivery of features. If these two key areas aren’t respected, the solution is very often – as already mentioned – garbage, and produces more problems than a longer development time.</p>

<p>If managers are trying to push through unrealistic release dates, the team has to develop the necessary people skills and learn how to negotiate in the right way with the management. On this topic I can recommend the book <em>Clean Coder</em> from R. C. Martin again.</p>

<h2 id="be-a-mentor">Be a mentor</h2>

<p>Something that took far too long for me to grasp was embracing the duty to undertake <strong>mentoring for younger junior developers</strong>.</p>

<p>I think lots of developers can relate to this scenario: a junior is obviously struggling, and a more experienced developer looks at the problem, solves it, offers a few brief explanatory sentences, and continues his own work. The junior tries to absorb the information and then also continues his work. However, to fully understand the problem he has to know more about the context and gain an in-depth knowledge of the problem domain. Lots of more experienced developers are neglecting this. The result is that the juniors are basically struggling all day, inefficiently wasting a lot of time, and losing the joy of programming.</p>

<div class="row">
    <div class="col-sm mt-3 mt-md-0 post-img">
        <figure>

  <picture>
    <source media="(max-width: 480px)" srcset="/assets/img/posts/senior_gif.gif-480.webp" />
    <source media="(max-width: 800px)" srcset="/assets/img/posts/senior_gif.gif-800.webp" />
    <source media="(max-width: 1400px)" srcset="/assets/img/posts/senior_gif.gif-1400.webp" />
    <!-- Fallback to the original file -->
    <img class="img-fluid rounded z-depth-1" src="/assets/img/posts/senior_gif.gif" title="Senior developer helps junior developer" />

  </picture>

</figure>

    </div>
</div>
<div class="caption">
    Source: Timeless meme from the internet
</div>

<p>Some people might argue that the junior should learn this stuff at home or in his previous education. This simply isn’t true. Everyone was at one point at the beginning of their career and needed time to grow into his or her role and area of responsibility. In my opinion this was the fault of the more experienced developer: it is his duty to improve not only the code base with new features, but also to support his team and his teammates. With the above-mentioned method, the senior is simply curing symptoms and not attending to the root of the problem.</p>

<p>And everyone knows: fighting the symptoms will never address the root cause. The single correct move would be to introduce the junior to what happens behind the scenes. Now he or she learns the ins and outs of software development. This may mean that the senior has to leave his own task for a while and pair programs with the junior. Another possibility would be that the senior takes time to discuss some task-relevant topics for gaining a collective and coherent image about the product being created.</p>

<p>In this way, I personally saw real improvement not only in the productivity of my team, but also in our overall motivation and drive for working together on the collective goal.</p>

<p>Again, Read R. C. Martin’s book <em>Clean Coder</em>. It was a real inspiration for me.</p>

<h2 id="refactor">Refactor</h2>

<p>Since the publication of the book <em>Refactoring</em> by Martin Fowler, the process of refining software after its delivery has become more and more important. Particularly with the rise of automated unit tests, the process of refactoring fits perfectly into the software development process and enables continual improvement of the code base.</p>

<h2 id="summary">Summary</h2>

<p>There may be other points that are relevant to the key responsibilities of a senior software developer. For me, these were the most important revelations I had over my past few years of coding experience. These boil down to the following list:</p>
<ul>
  <li>Learn the concepts</li>
  <li>Learn to apply them</li>
  <li>Respect quality</li>
  <li>Be a mentor for the less experienced team members</li>
  <li>Refactor where necessary and useful</li>
</ul>

<p>And I don’t know if my subliminal message came through, but I will simply repeat it again. <em>Clean Coder</em> by R. C. Martin is so good, and I think every maturing software developer should read it.</p>

<p>I hope that you have appreciated this article and I would love to read any feedback in the comments or in <a rel="noreferrer noopener" href="http://michaelwenzl.com/about#mail" target="_blank">e-mails</a> from you.</p>]]></content><author><name></name></author><category term="software" /><category term="career" /><category term="skills" /><summary type="html"><![CDATA[A short article about some core principles of senior software developers]]></summary></entry></feed>